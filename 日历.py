# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '日历.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import calendar
import os
import time
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QWidget, QPushButton, QMainWindow
import Details


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(486, 345)
        t = time.localtime()
        self.Year = t.tm_year
        self.Month = t.tm_mon

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 481, 331))
        self.tabWidget.setStyleSheet("background:rgb(213, 213, 213)")
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setElideMode(QtCore.Qt.ElideNone)
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(False)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.tabWidget.addTab(self.tab, "")
        self.widget = QtWidgets.QWidget()
        self.widget.setObjectName("widget")

        self.date = []
        _translate = QtCore.QCoreApplication.translate
        for i in range(31):
            tmp = QPushButton(self.widget)
            tmp.setObjectName("pushButton" + str(i + 1))
            tmp.setText(_translate("MainWindow", str(i + 1)))
            self.date.append(tmp)


        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(40, 20, 401, 31))
        self.label.setStyleSheet("background:rgba(85, 255, 255, 105)\n"
"")
        self.label.setText("")
        self.label.setObjectName("label")
        self.pushButton = QPushButton(self.widget)
        self.pushButton.setGeometry(QtCore.QRect(50, 30, 31, 21))
        self.pushButton.setStyleSheet("background:rgba(85, 170, 255, 55)\n"
"")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QPushButton(self.widget)
        self.pushButton_2.setGeometry(QtCore.QRect(90, 30, 31, 21))
        self.pushButton_2.setStyleSheet("background:rgba(85, 170, 255, 55)\n"
"")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QPushButton(self.widget)
        self.pushButton_3.setGeometry(QtCore.QRect(360, 30, 31, 21))
        self.pushButton_3.setStyleSheet("background:rgba(85, 170, 255, 55)\n"
"")
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QPushButton(self.widget)
        self.pushButton_4.setGeometry(QtCore.QRect(400, 30, 31, 21))
        self.pushButton_4.setStyleSheet("background:rgba(85, 170, 255, 55)\n"
"")
        self.pushButton_4.setObjectName("pushButton_4")

        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(180, 30, 55, 21))
        self.label_2.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.label_2.setStyleSheet("background:rgba(85, 170, 255, 55)")
        self.label_2.setWordWrap(False)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.widget)
        self.label_3.setGeometry(QtCore.QRect(260, 30, 35, 21))
        self.label_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_3.setStyleSheet("background:rgba(85, 170, 255, 55)")
        self.label_3.setObjectName("label_3")

        self.label_4 = QtWidgets.QLabel(self.widget)
        self.label_4.setGeometry(QtCore.QRect(50, 60, 34, 16))
        self.label_4.setStyleSheet("background:rgba(255, 255, 255, 0)")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.widget)
        self.label_5.setGeometry(QtCore.QRect(105, 60, 34, 16))
        self.label_5.setStyleSheet("background:rgba(255, 255, 255, 0)")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.widget)
        self.label_6.setGeometry(QtCore.QRect(165, 60, 34, 16))
        self.label_6.setStyleSheet("background:rgba(255, 255, 255, 0)")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.widget)
        self.label_7.setGeometry(QtCore.QRect(220, 60, 34, 16))
        self.label_7.setStyleSheet("background:rgba(255, 255, 255, 0)")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.widget)
        self.label_8.setGeometry(QtCore.QRect(280, 60, 34, 16))
        self.label_8.setStyleSheet("background:rgba(255, 255, 255, 0)")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.widget)
        self.label_9.setGeometry(QtCore.QRect(340, 60, 34, 16))
        self.label_9.setStyleSheet("background:rgba(255, 255, 255, 0)")
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.widget)
        self.label_10.setGeometry(QtCore.QRect(400, 60, 34, 16))
        self.label_10.setStyleSheet("background:rgba(255, 255, 255, 0)")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.widget)
        self.label_11.setGeometry(QtCore.QRect(40, 50, 401, 31))
        self.label_11.setStyleSheet("background:rgba(255, 255, 255,255)\n"
"")
        self.label_11.setText("")
        self.label_11.setObjectName("label_11")

        self.label_11.raise_()
        self.label.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.pushButton_3.raise_()
        self.pushButton_4.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.label_7.raise_()
        self.label_8.raise_()
        self.label_9.raise_()
        self.label_10.raise_()
        self.tabWidget.addTab(self.widget, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 486, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.getImportance()
        self.printCalender()
        self.pushButton.clicked.connect(lambda: self.printLastYear())
        self.pushButton_2.clicked.connect(lambda: self.printLastMonth())
        self.pushButton_3.clicked.connect(lambda :self.printNextMonth())
        self.pushButton_4.clicked.connect(lambda :self.printNextYear())
        self.DetailWindow = []

        for i in range(len(self.date)):
            ui = Details.Ui_Form()
            self.DetailWindow.append(QWidget())
            if i == 0:
                self.date[i].clicked.connect(lambda :self.showDetails(1))
            if i == 1:
                self.date[i].clicked.connect(lambda :self.showDetails(2))
            if i == 2:
                self.date[i].clicked.connect(lambda :self.showDetails(3))
            if i == 3:
                self.date[i].clicked.connect(lambda :self.showDetails(4))
            if i == 4:
                self.date[i].clicked.connect(lambda :self.showDetails(5))
            if i == 5:
                self.date[i].clicked.connect(lambda :self.showDetails(6))
            if i == 6:
                self.date[i].clicked.connect(lambda :self.showDetails(7))
            if i == 7:
                self.date[i].clicked.connect(lambda :self.showDetails(8))
            if i == 8:
                self.date[i].clicked.connect(lambda :self.showDetails(9))
            if i == 9:
                self.date[i].clicked.connect(lambda :self.showDetails(10))
            if i == 10:
                self.date[i].clicked.connect(lambda :self.showDetails(11))
            if i == 12:
                self.date[i].clicked.connect(lambda :self.showDetails(13))
            if i == 11:
                self.date[i].clicked.connect(lambda :self.showDetails(12))
            if i == 13:
                self.date[i].clicked.connect(lambda :self.showDetails(14))
            if i == 14:
                self.date[i].clicked.connect(lambda :self.showDetails(15))
            if i == 15:
                self.date[i].clicked.connect(lambda :self.showDetails(16))
            if i == 16:
                self.date[i].clicked.connect(lambda :self.showDetails(17))
            if i == 17:
                self.date[i].clicked.connect(lambda :self.showDetails(18))
            if i == 18:
                self.date[i].clicked.connect(lambda :self.showDetails(19))
            if i == 19:
                self.date[i].clicked.connect(lambda :self.showDetails(20))
            if i == 20:
                self.date[i].clicked.connect(lambda :self.showDetails(21))
            if i == 21:
                self.date[i].clicked.connect(lambda :self.showDetails(22))
            if i == 22:
                self.date[i].clicked.connect(lambda :self.showDetails(23))
            if i == 23:
                self.date[i].clicked.connect(lambda :self.showDetails(24))
            if i == 24:
                self.date[i].clicked.connect(lambda :self.showDetails(25))
            if i == 25:
                self.date[i].clicked.connect(lambda :self.showDetails(26))
            if i == 26:
                self.date[i].clicked.connect(lambda :self.showDetails(27))
            if i == 27:
                self.date[i].clicked.connect(lambda :self.showDetails(28))
            if i == 28:
                self.date[i].clicked.connect(lambda :self.showDetails(29))
            if i == 29:
                self.date[i].clicked.connect(lambda :self.showDetails(30))
            if i == 30:
                self.date[i].clicked.connect(lambda :self.showDetails(31))
        self.retranslateUi(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "周"))
        self.pushButton.setText(_translate("MainWindow", "<<"))
        self.pushButton_2.setText(_translate("MainWindow", "<"))
        self.pushButton_3.setText(_translate("MainWindow", ">"))
        self.pushButton_4.setText(_translate("MainWindow", ">>"))
        self.label_2.setText(_translate("MainWindow", "2022年"))
        self.label_3.setText(_translate("MainWindow", "7月"))
        self.label_4.setText(_translate("MainWindow", "周一"))
        self.label_5.setText(_translate("MainWindow", "周二"))
        self.label_6.setText(_translate("MainWindow", "周三"))
        self.label_7.setText(_translate("MainWindow", "周四"))
        self.label_8.setText(_translate("MainWindow", "周五"))
        self.label_9.setText(_translate("MainWindow", "周六"))
        self.label_10.setText(_translate("MainWindow", "周日"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.widget), _translate("MainWindow", "月"))

    def getDate(self,year,month):
        return calendar.monthcalendar(year,month)

    def printCalender(self):
        _translate = QtCore.QCoreApplication.translate
        Calender = self.getDate(self.Year,self.Month)
        d = 0
        self.label_2.setText(_translate("MainWindow", str(self.Year)+"年"))
        self.label_3.setText(_translate("MainWindow", str(self.Month)+"月"))
        for i in self.date:
            i.close()
        for i in range(len(Calender)):
            for j in range(len(Calender[i])):
                if Calender[i][j] == 0:
                    continue
                else:
                    d += 1
                tmp = self.date[d - 1]
                tmp.setGeometry(QtCore.QRect(40+j*60, 90+i*30, 41, 21))
                if self.importance.__contains__('_'.join([str(self.Year),str(self.Month),str(d)])):
                    imp = self.importance['_'.join([str(self.Year),str(self.Month),str(d)])]
                    if imp == 0:
                        tmp.setStyleSheet("background:rgba(251, 255, 179, 255)\n""")
                    elif imp == 1:
                        tmp.setStyleSheet("background:rgba(255, 239, 60, 255)\n""")
                    elif imp == 2:
                        tmp.setStyleSheet("background:rgba(255, 21, 52, 255)\n""")
                    elif imp == 3:
                        tmp.setStyleSheet("background:rgba(255, 176, 39, 255)\n""")
                    elif imp == 4:
                        tmp.setStyleSheet("background:rgba(255, 108, 23, 255)\n""")
                    elif imp == 5:
                        tmp.setStyleSheet("background:rgba(255, 64, 16, 255)\n""")
                else:
                    tmp.setStyleSheet("background:rgba(255, 255, 255, 255)\n""")

                tmp.raise_()
                tmp.show()

    def printNextYear(self):
        _translate = QtCore.QCoreApplication.translate
        self.Year += 1
        self.printCalender()

    def printLastYear(self):
        _translate = QtCore.QCoreApplication.translate
        self.Year -= 1
        self.printCalender()

    def printNextMonth(self):
        _translate = QtCore.QCoreApplication.translate
        self.Month += 1
        self.printCalender()

    def printLastMonth(self):
        _translate = QtCore.QCoreApplication.translate
        self.Month -= 1
        self.printCalender()

    def showDetails(self,i):
        ui = Details.Ui_Form()
        DetailWindow = QMainWindow()
        ui.setupUi(DetailWindow,self.Year,self.Month,i)
        self.DetailWindow.append(DetailWindow)
        DetailWindow.show()

    def get_imp(self,path):
        f = open(str(path))
        lines = f.readlines()
        imp = 0
        for line in lines:
            items = line.split(';')
            imp = max(imp,int(items[4]))
        return imp

    def getImportance(self):
        # 这个 mpath应该是一个全局变量   在登陆后 设置为对应的用户所处的文件夹位置
        self.importance = {}
        Upath = "E:\python大作业\data"
        Ypaths = os.listdir(Upath)
        Ypaths = [Upath + "/" + p for p in Ypaths]
        for Ypath in Ypaths:
            year = os.path.basename(Ypath)
            Mpaths = os.listdir(Ypath)
            Mpaths = [Ypath + "/" + p for p in Mpaths]
            for Mpath in Mpaths:
                month = os.path.basename(Mpath)
                Dpaths = os.listdir(Mpath)
                Dpaths = [Mpath + "/" + p for p in Dpaths]
                for path in Dpaths:
                    day = os.path.basename(path).replace('.txt','')
                    imp = self.get_imp(path)
                    date = '_'.join([year,month,day])
                    self.importance[date] = imp